import akka.actor._
import akka.io._
import akka.util._
import java.net._
import com.typesafe.config._
import org.springframework.jdbc.core._
import scala.util._
import java.io._
import java.nio.file._
import java.util.Base64
import java.sql.ResultSet
import akka.event._

class List1Handler extends TextQueryHandler("^list (?<date>\\d{1,4}-\\d{1,2}-\\d{1,2})$".r) with JdbcHelpers {
	import Tcp._
	import Base64._
	import org.json4s._
	import org.json4s.JsonDSL._
	import org.json4s.jackson.JsonMethods._

        val DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd")

	def apply(src: ActorRef, owner: ActorRef, db: JdbcTemplate, config: Config, log: LoggingAdapter, message: String, content: ByteString): Try[Next] = Try {
		val pattern(date) = message
		val articles = query(db)("select id, global, local, gallery, title, owner, created, date from news where cast(created as date)=? order by created asc", new java.sql.Date(DATE_FORMAT.parse(date).getTime)) { (row: ResultSet, index: Integer) â‡’
			(row.getInt("id").toString -> ("global" -> row.getBoolean("global")) ~ ("local" -> row.getBoolean("local")) ~ ("gallery" -> row.getBoolean("gallery")) ~ ("title" -> row.getString("title")) ~ ("owner" -> row.getString("owner")) ~ ("created" -> DATE_FORMAT.format(row.getDate("created"))) ~ ("date" -> row.getString("date")))
		} toMap;
		src ! Write(ByteString("+%s\r\n".format(compact(render(articles)))))
                Next("default", Map("buffer" -> content))
	}
}
